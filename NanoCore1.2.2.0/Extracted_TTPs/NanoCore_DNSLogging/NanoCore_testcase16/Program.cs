using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic.CompilerServices;

class Program
{
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct DnsRecord
    {
        public IntPtr NextRecord;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string Name;
        public short Type;
        public short DataLength;
        public int Flags;
        public int Ttl;
    }

    [DllImport("dnsapi.dll")]
    public static extern bool DnsGetCacheDataTable(out IntPtr ppQueryResultsSet);

    [DllImport("dnsapi.dll")]
    public static extern void DnsRecordListFree(IntPtr ptr, int type);

    private static string DNS_logger_path = "C:\\users\\public\\";

    static void Main(string[] args)
    {
        setup();

        // Specify the DNS record type you want to log (e.g., (1)A record for IPv4)
        string[] records = GetDnsRecords(1);
        if (records.Length > 0)
        {
            Console.WriteLine("DNS records retrieved !!!");

            // Log the DNS records to a file
            LogDnsRecordsToFile(DNS_logger_path, records);
        }
        else
        {
            Console.WriteLine("Failed to retrieve DNS records !!!");
        }
    }

    private static void setup()
    {
        Console.Write("Setting up logger path...");
        DNS_logger_path = Path.Combine(DNS_logger_path, Path.ChangeExtension("KB_" + Conversions.ToString(Environment.TickCount), "dat"));
    }

    private static string[] GetDnsRecords(short recordType)
    {
        Console.WriteLine("Setting DNS record retrieved type to A class domains");

        List<string> list = new List<string>();
        IntPtr ptr;
        if (DnsGetCacheDataTable(out ptr))
        {
            Console.WriteLine("Getting DNS Records...");
            try
            {
                DnsRecord dnsRecord = (DnsRecord)Marshal.PtrToStructure(ptr, typeof(DnsRecord));
                while (!(dnsRecord.NextRecord == IntPtr.Zero))
                {
                    dnsRecord = (DnsRecord)Marshal.PtrToStructure(dnsRecord.NextRecord, typeof(DnsRecord));
                    if (dnsRecord.Type == recordType)
                    {
                        list.Add(dnsRecord.Name);
                        Console.WriteLine($"DNS record found: {dnsRecord.Name}");
                    }
                }
            }
            finally
            {
                // Always release memory
                DnsRecordListFree(ptr, 1); // 1 indicates that the DNS cache data is to be freed
            }
        }
        return list.ToArray();
    }

    private static void LogDnsRecordsToFile(string filePath, string[] records)
    {
        Console.WriteLine($"Logging retrieved DNS records: {DNS_logger_path}");

        try
        {
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                foreach (string record in records)
                {
                    writer.WriteLine(record);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error writing DNS records to file: " + ex.Message);
        }
    }
}