using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace NanoCore_testcase8
{
    internal class Program
    {
        // Import the DeleteFile function from kernel32.dll
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        public static extern bool DeleteFile(string lpFileName);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        static extern IntPtr CreateFile(
        string lpFileName,
        uint dwDesiredAccess,
        uint dwShareMode,
        IntPtr lpSecurityAttributes,
        uint dwCreationDisposition,
        uint dwFlagsAndAttributes,
        IntPtr hTemplateFile);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadFile(
            IntPtr hFile,
            [Out] byte[] lpBuffer,
            uint nNumberOfBytesToRead,
            out uint lpNumberOfBytesRead,
            IntPtr lpOverlapped);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool CloseHandle(IntPtr hObject);

        static void Main(string[] args)
        {
            //Clear Zone Identifier
            clearZone(Assembly.GetExecutingAssembly().Location);

            //Check Zone Identifier
            if (!HasZoneIdentifier(Assembly.GetExecutingAssembly().Location))
            {
                Console.WriteLine(":Zone.Identifier deleted");
            }
            else
            {
                Console.WriteLine("Failed to delete :Zone.Identifier");
            }
        }

        static void clearZone(string path)
        {
            DeleteFile(path + ":Zone.Identifier");
        }

        static bool HasZoneIdentifier(string filePath)
        {
            string file_zone = filePath + ":Zone.Identifier";

            // Open the ADS using CreateFile
            IntPtr hFile = CreateFile(file_zone, 0x80000000, 1, IntPtr.Zero, 3, 0, IntPtr.Zero);

            if (hFile.ToInt64() != -1)
            {
                byte[] buffer = new byte[1024];
                uint bytesRead;
                if (ReadFile(hFile, buffer, (uint)buffer.Length, out bytesRead, IntPtr.Zero))
                {
                    string content = Encoding.UTF8.GetString(buffer, 0, (int)bytesRead);
                    Console.WriteLine("ADS Content: " + content);
                }
                CloseHandle(hFile);
            }
            else
            {
                Console.WriteLine("Failed to open ADS or ADS does not exist.");
                return false;
            }

            return true;
        }
    }
}
