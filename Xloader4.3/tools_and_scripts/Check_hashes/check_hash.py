#Author: Shaddy43

import json
import binascii

counter = 0

def calculate_crc_bzip2(input_string):
    poly = 0x04C11DB7
    init = 0xFFFFFFFF
    xor_out = 0xFFFFFFFF
    
    # Convert the input string to lowercase for case-insensitive comparison
    input_string = input_string.lower()
    
    crc = init
    
    for char in input_string:
        crc ^= (ord(char) << 24)
        for _ in range(8):
            if crc & 0x80000000:
                crc = (crc << 1) ^ poly
            else:
                crc <<= 1
    
    crc ^= xor_out
    crc &= 0xFFFFFFFF
    
    return crc

def read_provided_hashes(file_path):
    with open(file_path, 'r') as file:
        hashes = [int(line.strip(), 16) for line in file.readlines()]
    return hashes

def check_and_print_matching_strings(json_file_path, hash_file_path):
    provided_hashes = read_provided_hashes(hash_file_path)

    with open(json_file_path, 'r') as file:
        data = json.load(file)

    for key, strings in data.items():
        for input_string in strings:
            result = calculate_crc_bzip2(input_string)
            if result in provided_hashes:
                print(f"Provided Hash: 0x{result:X}")
                print(f"Matching String: {input_string}\n")
                global counter
                counter += 1

# Example usage:
json_file_path = "hash_sources.json"
hash_file_path = "hashes.txt"

check_and_print_matching_strings(json_file_path, hash_file_path)

if counter == 0:
    print("No match found")
else:
    print(f"{counter} matches found !!!")
